// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MixinModule does not add datatype annotation to literal property when datatype is ambiguous: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    foo: string | undefined;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.literal()
        foo: string | undefined;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule does not try import self when property has range of enclosing class: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    foo: Example.Class<D> | undefined;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.resource({ as: [ClassMixin] })
        foo: Example.Class | undefined;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule generates a bundle module with property mixin types but skipping external mixins: toMatchSnapshot 1`] = `
"import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import { ClassMixin } from \\"../Class\\";
import { FriendMixin } from \\"../Friend\\";

export const ClassBundle = [
    ClassMixin as Mixin,
    FriendMixin as Mixin];
"
`;

exports[`MixinModule generates a bundle module with property mixin types but skipping external mixins: toMatchSnapshot 2`] = `
"export { ClassBundle } from \\"./Class\\";
"
`;

exports[`MixinModule generates a bundle module with super classes but without externals: toMatchSnapshot 1`] = `
"import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import { SuperMixin } from \\"../Example\\";
import { ClassMixin } from \\"../Class\\";

export const ClassBundle = [
    SuperMixin as Mixin,
    ClassMixin as Mixin];
"
`;

exports[`MixinModule generates a bundle module with super classes but without externals: toMatchSnapshot 2`] = `
"export { ClassBundle } from \\"./Class\\";
"
`;

exports[`MixinModule generates a mixin class where term is not safe identifier: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface _3Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
}

export function _3ClassMixin<Base extends Constructor>(Resource: Base): Constructor<_3Class> & Base {
    @namespace(ex)
    class _3ClassClass extends Resource implements _3Class {
    }
    return _3ClassClass
}

class _3ClassImpl extends _3ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<_3Class>) {
        super(arg, init)
        this.types.add(ex._3Class)
    }

    static readonly __mixins: Mixin[] = [_3ClassMixin];
}
_3ClassMixin.appliesTo = ex['Class']
_3ClassMixin.Class = _3ClassImpl
"
`;

exports[`MixinModule generates a mixin class with external super classes: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";
import type * as Schema from \\"@rdfine/schema\\";
import { Person as PersonMixin } from \\"@rdfine/schema/Person\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends Schema.Person<D>, RdfResource<D> {
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends PersonMixin(Resource) implements Class {
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin, PersonMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule generates a mixin class without props: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule generates array property: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    foo: Array<Example.Foo<D>>;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.resource({ values: 'array' })
        foo!: Array<Example.Foo>;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule generates date property: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    foo: Date | undefined;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.literal({ type: Date, datatype: $rdf.namedNode('http://www.w3.org/2001/XMLSchema#date') })
        foo: Date | undefined;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule generates list property: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    foo: Array<Example.Foo<D>>;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.resource({ values: 'list' })
        foo!: Array<Example.Foo>;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule generates list/single property: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    foo: Example.Foo<D> | Array<Example.Foo<D>> | undefined;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.resource({ values: ['list', 'single'] })
        foo: Example.Foo | Array<Example.Foo> | undefined;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule generates property with automatic external type cast when predicate has strict semantics: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";
import type * as Example from \\"@rdfine/example\\";
import { Foo as FooMixin } from \\"@rdfine/example/Foo\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    foo: Example.Foo<D> | undefined;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.resource({ as: [FooMixin] })
        foo: Example.Foo | undefined;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule generates property with automatic type cast when predicate has strict semantics: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    foo: Example.Foo<D> | undefined;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.resource({ implicitTypes: [ex.Foo] })
        foo: Example.Foo | undefined;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule generates property with datatype-annotated literal: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    foo: string | undefined;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.literal({ datatype: $rdf.namedNode('http://www.w3.org/2001/XMLSchema#anyURI') })
        foo: string | undefined;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;

exports[`MixinModule wraps property name in quotes when term has non-alpha characters: toMatchSnapshot 1`] = `
"import RdfResourceImpl, { Constructor, namespace, RdfResource, property } from \\"@tpluscode/rdfine\\";
import * as $rdf from \\"@rdf-esm/data-model\\";
import type * as RDF from \\"rdf-js\\";
import { ex } from \\"./namespace\\";
import type { Initializer, ResourceNode } from \\"@tpluscode/rdfine/RdfResource\\";
import type { Mixin } from \\"@tpluscode/rdfine/lib/ResourceFactory\\";
import type * as Example from \\"..\\";

export interface Class<D extends RDF.DatasetCore = RDF.DatasetCore> extends RdfResource<D> {
    'foo-bar': string | undefined;
}

export function ClassMixin<Base extends Constructor>(Resource: Base): Constructor<Class> & Base {
    @namespace(ex)
    class ClassClass extends Resource implements Class {
        @property.literal()
        'foo-bar': string | undefined;
    }
    return ClassClass
}

class ClassImpl extends ClassMixin(RdfResourceImpl) {
    constructor(arg: ResourceNode, init?: Initializer<Class>) {
        super(arg, init)
        this.types.add(ex.Class)
    }

    static readonly __mixins: Mixin[] = [ClassMixin];
}
ClassMixin.appliesTo = ex.Class
ClassMixin.Class = ClassImpl
"
`;
